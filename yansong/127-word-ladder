#basic bfs, each time use helper function to find the next possible word and add to the queue

public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        Set<String> visited = new HashSet<>();
        Queue<String> que = new LinkedList<>();
        int step = 0;
        que.add(beginWord);
        visited.add(beginWord);
        while(!que.isEmpty()) {
            int size = que.size();
            step++;
            for(int i = 0; i < size; i++) {
                String s = que.poll();
                if(s.equals(endWord)) {
                    return step;
                }
                for(String ss : find(s,dict)) {
                    if (visited.add(ss)) {
                        que.add(ss);
                    }
                }
            }
                
        }
        return 0;
    }
    private List<String> find(String s, Set<String> dict) {
        List<String> res = new ArrayList<>();
        char[] ss = s.toCharArray();
        for(int i = 0; i < ss.length; i++) {
            char old = ss[i];
            for(char j = 'a'; j <= 'z'; j++) {
                if (j != old) {
                   ss[i] = j;
                if(dict.contains(new String(ss))) {
                    res.add(new String(ss));
                } 
                }
                
            }
            ss[i] = old;
        }
        return res;
        
    }
