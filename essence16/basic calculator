    int calculate(string s) {
        char prev_opr = '+';
        long num = 0;
        stack<long> stk;
        for (int i = 0; i < s.size(); i++) { 
            if (isdigit(s[i])) { 
                num = num * 10 + (s[i] - '0');
            }
            else if (s[i] == '(') { 
                int count = 1;
                for (int j = i + 1; j < s.size(); j++) { 
                    if (s[j] == '(') { 
                        count++;
                    }
                    else if (s[j] == ')') { 
                        count--;
                    }
                    
                    if (count == 0) { 
                        num = calculate(s.substr(i + 1, j - i + 1));
                        i = j;
                        //Note: remember to break;
                        break;
                    }
                }
            }
            if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/' || (i == s.size() - 1)) { 
                if (prev_opr == '+') { 
                    stk.push(num);
                }
                else if (prev_opr == '-') { 
                    stk.push(-num);
                }
                else if (prev_opr == '*') { 
                    int new_num = stk.top() * num;
                    stk.pop();
                    stk.push(new_num);
                }
                else if (prev_opr == '/') { 
                    int new_num = stk.top() / num;
                    stk.pop();
                    stk.push(new_num);
                }
                
                prev_opr = s[i];
                num = 0;
            }
        }
        int ans = 0;
        while (!stk.empty()) { 
            ans += stk.top();
            stk.pop();
        }
        return ans;
    }
