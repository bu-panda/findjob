class Solution {
public:
    vector<int> inorder(TreeNode* root) { 
        stack<TreeNode*> stk;
        vector<int> ans;
        TreeNode* cur = root;
        while (cur != nullptr || !stk.empty()) { 
            while (cur != nullptr) { 
                stk.push(cur);
                cur = cur->left;
            }
            TreeNode* tmp = stk.top();
            stk.pop();
            ans.push_back(tmp->val);
            cur = tmp->right;
        }
        return ans;
    }
    
    TreeNode* build(vector<int>& val, int l, int r) { 
        if (l > r) { 
            return nullptr;
        }
        int mid = (l + r) / 2;
        TreeNode* root = new TreeNode(val[mid]);
        root->left = build(val, l, mid - 1);
        root->right = build(val, mid + 1, r);
        return root;
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> nums;
        nums = inorder(root);
        TreeNode* ans = build(nums, 0, nums.size() - 1);
        return ans;
    }
};
