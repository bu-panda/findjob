scan the matrix once.

There are 4 directions to move. For each 1, we check its predecessor or do a deep search


from collections import defaultdict
class Solution:
    def fix(self, M, i, j, d, counter, cur_max):
        delta = {
            0: [0, 1],
            1: [1, 0],
            2: [1, 1],
            3: [-1, 1]
        }
        
        dx, dy = delta[d]
        
        # query
        if 0 <= i - dx < len(M) and 0 <= j - dy < len(M[0]) and M[i - dx][j - dy] == 1:
            counter[(i, j, d)] = counter[(i - dx, j - dy, d)]
        else:
            tmp_i, tmp_j = i, j
            while 0 <= tmp_i < len(M) and 0 <= tmp_j < len(M[0]):
                if M[tmp_i][tmp_j] == 1:
                    counter[(i, j, d)] += 1
                    cur_max = max(cur_max, counter[(i, j, d)])
                    tmp_i += dx
                    tmp_j += dy
                else:
                    break
        return cur_max
    
    
    def longestLine(self, M: List[List[int]]) -> int:
        if not M:
            return 0
        ans = 0
        counter = defaultdict(int)
        for i, row in enumerate(M):
            for j, e in enumerate(row):
                if e == 0:
                    continue
                for d in range(4):
                    ans = max(ans, self.fix(M, i, j, d, counter, ans))
        #for x in counter.items():
        #    print(x)
        return ans
                
                
                
        