backtrace every non-zero element,刚开始想复杂了。不用太多剪

class Solution:
    
    def within(self, x, y, row, col):
        return  (0 <= x < row) and (0 <= y < col)
    
    def get_neighbor(self, x, y, grid):
        move = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        neighbors = []
        for dx, dy in move:
            if self.within(x + dx, y + dy, len(grid), len(grid[0])) and grid[x + dx][y + dy] != 0:
                yield x + dx, y + dy
    
    
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        
        row, col = len(grid), len(grid[0])
        visit = set()
        ans = 0        
        for i, row in enumerate(grid):
            for j, e in enumerate(row):
                if grid[i][j] != 0:
                    ans = max(ans, self.explore(i, j, grid, visit))
                    
        return ans
    
    def explore(self, i, j, grid, visit):
        if (i, j) in visit:
            return 0
        else:
            visit.add((i, j))
            ans = 0
            for nx, ny in self.get_neighbor(i, j, grid):
                ans = max(ans, self.explore(nx, ny, grid, visit))
            visit.remove((i, j))
            return ans + grid[i][j]
                
            
            
        
            
        
        
        