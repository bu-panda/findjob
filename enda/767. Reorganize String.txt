本质上都是贪心， 用堆。

例子给出的答案比较神奇，一次弹两个，避免重叠

from collections import Counter
import heapq
class Solution:
    def reorganizeString(self, S: str) -> str:
        q = []
        for s, f in Counter(S).most_common():
            heapq.heappush(q, (-f, s))
        
        ans = ""
        while q:
            tmp = []
            next_char = ""
            while q:
                freq, c = heapq.heappop(q)
                freq = -freq
                if ans == "" or c != ans[-1]:
                    next_char = c
                    if freq > 1:
                        tmp.append((-freq + 1, c))
                    break
                else:
                    tmp.append((-freq, c))
            
            if next_char == "":
                return ""
            else:
                ans += next_char
                for e in tmp:
                    heapq.heappush(q, e)
        return ans
		


class Solution(object):
    def reorganizeString(self, S):
        pq = [(-S.count(x), x) for x in set(S)]
        heapq.heapify(pq)
        if any(-nc > (len(S) + 1) / 2 for nc, x in pq):
            return ""

        ans = []
        while len(pq) >= 2:
            nct1, ch1 = heapq.heappop(pq)
            nct2, ch2 = heapq.heappop(pq)
            #This code turns out to be superfluous, but explains what is happening
            #if not ans or ch1 != ans[-1]:
            #    ans.extend([ch1, ch2])
            #else:
            #    ans.extend([ch2, ch1])
            ans.extend([ch1, ch2])
            if nct1 + 1: heapq.heappush(pq, (nct1 + 1, ch1))
            if nct2 + 1: heapq.heappush(pq, (nct2 + 1, ch2))

        return "".join(ans) + (pq[0][1] if pq else '')