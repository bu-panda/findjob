写了next和previou permutation的方法

next:
- 观察局部有序性。 发现next,需要观察从后往前递增序列
- 把从后往前递增序列翻转
- 发现这个局部序列的前一个元素，用这个元素去和后边翻转的元素比较，发现第一个比它大的元素

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        origin = [x for x in nums]
        idx = len(nums) - 1
        while idx > 0:
            if nums[idx] <= nums[idx - 1]:
                idx -= 1
            else:
                break
        
        i, j = idx, len(nums) - 1
        while i < j:
            nums[i], nums[j] = nums[j], nums[i]
            i += 1
            j -= 1
        
        if idx == 0:
            return 
        
        x = idx - 1
        for y in range(idx, len(nums)):
            if nums[y] <= nums[x]:
                continue
            else:
                break
        nums[x], nums[y] = nums[y], nums[x]
        
        cur = [x for x in nums]
        self.previous_permutation(cur)
        for x, y in zip(cur, origin):
            assert x == y
        
pre:
- 观察局部有序性。 发现next,需要观察从后往前递减序列
- 把从后往前递增序列翻转
- 发现这个局部序列的前一个元素，用这个元素去和后边翻转的元素比较，发现第一个比它小的元素       
        
        
    def previous_permutation(self, nums):
        idx = len(nums) - 1
        while idx > 0:
            if nums[idx - 1] <= nums[idx]:
                idx -= 1
            else:
                break
        i, j  = idx, len(nums) - 1
        while i < j:
            nums[i], nums[j] = nums[j], nums[i]
            i += 1
            j -= 1
        if idx == 0:
            return
        
        x = idx - 1
        for y in range(idx, len(nums)):
            if nums[y] >= nums[x]:
                continue
            else:
                break
        nums[x], nums[y] = nums[y], nums[x]
    

        
            
        
        