这题居然直接用长度来group就行了。

from collections import defaultdict

class MagicDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.d = defaultdict(set)
        
        

    def buildDict(self, d: List[str]) -> None:
        """
        Build a dictionary through a list of words
        """
        for word in d:
            self.d[len(word)].add(word)
        
    def word_distance(self, s1, s2):
        find_diff = False
        for c1, c2 in zip(s1, s2):
            if c1 != c2 and not find_diff:
                find_diff = True
            elif c1 != c2 and find_diff:
                return False
        return find_diff
        

    def search(self, word: str) -> bool:
        """
        Returns if there is any word in the trie that equals to the given word after modifying exactly one character
        """
        candidates = self.d[len(word)]
        if not candidates:
            return False
        
        for cand in candidates:
            if self.word_distance(cand, word):
                return True
        return False
        


# Your MagicDictionary object will be instantiated and called as such:
# obj = MagicDictionary()
# obj.buildDict(dict)
# param_2 = obj.search(word)