什么都好，就是maintain pointers比较麻烦

class Node:
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.next = None
        self.prev = None

class LRUCache:

    def __init__(self, capacity: int):
        self.data = None
        self.index = {}
        self.head = None
        self.tail = None
        self.cap = capacity
    
    
    def move_to_head(self, node):
        head, tail = self.head, self.tail
        if node == head:
            pass
        elif node == tail:
            prev = node.prev
            prev.next = None
            self.tail = prev
            
            node.next = head
            node.prev = None
            head.prev = node
            self.head = node    
        else:
            pre = node.prev
            suc = node.next
            pre.next = suc
            suc.prev = pre
            
            node.prev = None
            node.next = head
            head.prev = node
            self.head = node
    
    def add_to_head(self, node):
        if self.head is None:
            self.head = node
            self.tail = node
        else:
            node.next = self.head
            node.prev = None
            self.head.prev = node
            self.head = node
    

    def get(self, key: int) -> int:
        if key not in self.index:
            return -1
        node = self.index[key]
        self.move_to_head(node)
        return node.val
        

    def put(self, key: int, value: int) -> None:
        if self.cap <= 0:
            return
        
        count = len(self.index)
        if count == 0:
            node = Node(key, value)
            self.index[key] = node
            self.head = node
            self.tail = node
            return
        # Update
        if key in self.index:
            # Get and move it to head
            self.get(key)
            # Update value
            self.head.val = value
        else:
            node = Node(key, value)
            if self.cap == count:
                # Add to head
                self.index[key] = node
                self.add_to_head(node)
                # Delete tail
                pre_tail = self.tail.prev
                pre_tail.next = None
                self.tail.prev = None
                del self.index[self.tail.key]
                self.tail = pre_tail
            else:
                self.tail.next = node
                node.prev = self.tail
                self.tail = node
                self.move_to_head(node)
                self.index[node.key] = node
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)