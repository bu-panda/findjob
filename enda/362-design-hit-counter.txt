The hit queue contains a couple whose structure is (timestamp, sum_of_hit_so_far)

Everytime when a new hit comes, we check the tail of the hit_queue, if it is on the same time, increase the frequency.
If not on the same time, insert a new entry based on previous entry.

When we call get hit, first we find out the left bounder of the search, which is currentTime - BUFFER(299). Find the location,
Then search from left_idx to the right most
 - Get the total hit up to currentTime
 - Minus all those hits before left boundary.  



import bisect
from collections import deque

class HitCounter:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.hit_queue = []
        self.BUFFER_SIZE = 299

    def hit(self, timestamp: int) -> None:
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        """
        if not self.hit_queue:
            self.hit_queue.append((timestamp, 1))
        else:
            last_hit_time, freq = self.hit_queue.pop()
            if last_hit_time == timestamp:
                self.hit_queue.append((last_hit_time, freq + 1))
            else:
                self.hit_queue.append((last_hit_time, freq))
                self.hit_queue.append((timestamp, freq + 1))
        
    def getHits(self, timestamp: int) -> int:
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        """
        left_val = max(1, timestamp - self.BUFFER_SIZE)
        left_idx = bisect.bisect_left(self.hit_queue, (left_val, 0))
        if left_idx > 0:
            _, dropped = self.hit_queue[left_idx - 1]
        else:
            dropped = 0
        
        right_idx = bisect.bisect_right(self.hit_queue, (timestamp, float('inf')), left_idx, len(self.hit_queue))
        if right_idx == 0:
            return 0
        else:
            _, freq = self.hit_queue[right_idx - 1]
            return freq - dropped
            
        


# Your HitCounter object will be instantiated and called as such:
# obj = HitCounter()
# obj.hit(timestamp)
# param_2 = obj.getHits(timestamp)