这个写法非常的巧妙，直接递归是不能让yield 正常工作的
但是，这儿把循环放在那，就完成了这个操作，非常骚

    def gen_num(self, nestedList, depth):
        for e in nestedList:
            if e.isInteger():
                yield e.getInteger(), depth
            else:
                for m, d2 in self.gen_num(e.getList(), depth + 1):
                    yield m, d2

# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """

class Solution:
    def gen_num(self, nestedList, depth):
        for e in nestedList:
            if e.isInteger():
                yield e.getInteger(), depth
            else:
                for m, d2 in self.gen_num(e.getList(), depth + 1):
                    yield m, d2
                
    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        max_depth = max([w for e, w in self.gen_num(nestedList, 1)] + [0]) + 1
        return sum( e * (max_depth - w) for e, w in self.gen_num(nestedList, 1))
        
        
        
        
        
        
        
        