整体比较直观，但是有几个问题需要弄清楚

第一个是坐标从 左上角开始，往上往下的 delta要搞清楚， 

第二个，弹出来的food可能不存在，需要检验空值

第三个，接触自身这一条需要特别防止追尾，下一个元素可以是棋盘任意位置以及当前尾巴


from collections import deque
class SnakeGame:

    def __init__(self, width: int, height: int, food: List[List[int]]):
        """
        Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
        """
        self.body = deque([(0,0)])
        self.shape = (width, height)
        self.food = deque(food)
        self.is_over = False
        self.move_delta = {
            "U": [-1, 0],
            "L": [0, -1],
            "R": [0, 1],
            "D": [1, 0]
        }
    
    def within(self, x, y):
        return (0 <= x < self.shape[1]) and (0 <= y < self.shape[0])
    
    def move(self, direction: str) -> int:
        """
        Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body.
        """
        if self.is_over:
            return -1        
        # Judge whether it is outside
        x, y = self.body[0]
        nx, ny = x + self.move_delta[direction][0], y + self.move_delta[direction][1]
        if not self.within(nx, ny):
            self.is_over = True
            return -1
        
        # Judge whether it touches body
        if len(self.body) > 4:
            last_idx = self.body[-1]
            if (nx, ny) in set(self.body) and (nx, ny) != (last_idx[0], last_idx[1]):
                self.is_over = True
                return -1
        
        # Current food
        if self.food:
            food = self.food[0]
        else:
            food = [-1, -1]
        if nx == food[0] and ny == food[1]:
            self.body.appendleft((nx, ny))
            self.food.popleft()
        else:
            self.body.appendleft((nx, ny))
            self.body.pop()
        return len(self.body) -1

# Your SnakeGame object will be instantiated and called as such:
# obj = SnakeGame(width, height, food)
# param_1 = obj.move(direction)