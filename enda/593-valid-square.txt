import math
class Solution:
    
    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        def distance(x, y):
            return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1])
        
        def vector(x, y):
            return [y[0] - x[0], y[1] - x[1]]
        
        def cos_vector(v1, v2):
            u = v1[0] * v2[0] + v1[1] * v2[1]
            d1 = v1[0] * v1[0] + v1[1] * v1[1]
            d2 = v2[0] * v2[0] + v2[1] * v2[1]
            if d1 * d2 == 0:
                return None
            return  u / math.sqrt(d1 * d2)
            
		
        # Sort by edge length
        ds = sorted([(distance(p1, p2), vector(p1, p2)),
                     (distance(p1, p3), vector(p1, p3)),
                     (distance(p1, p4), vector(p1, p4))])
                
        e1, v1 = ds[0]
        e2, v2 = ds[1]
        e3, v3 = ds[2]
		
		# Calculate cos0 over each edge
        coses = [cos_vector(v1, v3), cos_vector(v2, v3), cos_vector(v1, v2)]
		# If zero vector exists, it result in None
        if None in coses or coses[2] != 0.0:
            return False
        
		# Float comparison
        if coses[0] - coses[1] > 0.0000001 or coses[1] - math.sqrt(0.5) > 0.00000001:
            return False
        
		# Edge constains
        if e1 != e2 or e1 * 2 != e3:
            return False
        return True        
        
        