First submission, Runtime exceeded

Use accumulate matrix. We can optimize the runtime by doing bisec


class Solution:
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        if not mat:
            return 0
        
        row, col = len(mat), len(mat[0])
        accu_mat = [[0 for x in range(col + 1)] for y in range(row + 1)]
        
        for i in range(1, row + 1):
            for j in range(1, col + 1):
                accu_mat[i][j] = accu_mat[i][j - 1] + mat[i - 1][j - 1]
        
        for i in range(1, row + 1):
            for j in range(1, col + 1):
                accu_mat[i][j] += accu_mat[i - 1][j]
                
        size = min(row, col) - 1
        for s in range(size, -1, -1):
            for i in range(row - s):
                for j in range(col - s):
                        left_top, bot_right = [i + 1, j + 1], [i + 1 + s, j + 1 + s]
                        total = self.get_sum(left_top, bot_right, accu_mat)
                        if total <=threshold:
                            return s + 1
        return 0
    
    def get_sum(self, l, r, mat):
        x, y = l[0], l[1]
        m, n = r[0], r[1]
        return mat[m][n] - mat[m][y-1] - mat[x-1][n] + mat[x-1][y-1]
        
        
		

Use bi-search to find the possible size. Here size is the delta, when delta = 1 it includes two elements.

be aware of that when result if 0, which means there is no such matrix, return 0. Set result = -1 to make code lint

class Solution:
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        if not mat:
            return 0
        
        row, col = len(mat), len(mat[0])
        accu_mat = [[0 for x in range(col + 1)] for y in range(row + 1)]
        
        for i in range(1, row + 1):
            for j in range(1, col + 1):
                accu_mat[i][j] = accu_mat[i][j - 1] + mat[i - 1][j - 1]
        
        for i in range(1, row + 1):
            for j in range(1, col + 1):
                accu_mat[i][j] += accu_mat[i - 1][j]
                
        low, high = 0,  min(row, col)
        result = -1
        while low < high:
            s = (low + high) // 2
            find = False
            for i in range(row - s):
                for j in range(col - s):
                        left_top, bot_right = [i + 1, j + 1], [i + 1 + s, j + 1 + s]
                        total = self.get_sum(left_top, bot_right, accu_mat)
                        if total <=threshold:
                            find = True
                            break
                if find:
                    break
            if find:
                low = s + 1
                result = s
            else:
                high = s
                        
        return result + 1
    
    def get_sum(self, l, r, mat):
        x, y = l[0], l[1]
        m, n = r[0], r[1]
        return mat[m][n] - mat[m][y-1] - mat[x-1][n] + mat[x-1][y-1]
        
        